@page "/checkout"
@inject NavigationManager navi
@inject ICartService cartService
@inject IAddressProvinceService provinceService
@inject IRequestService requestService
@inject IUserService userService
@inject IToastService toastService


<!-- Checkout Section Begin -->
<section class="checkout spad" style="padding-top: 30px">
    <div class="container">
        @if (Cart == null || Cart.Items.Count < 1)
        {
            <div class="row" style="margin-top:-30px">
                <div class="col-lg-12" style="text-align:center">
                    <img src="/img/empty_cart.jpg" /><br />
                    <a href="javascript:;" @onclick="@(()=>navi.NavigateTo("/shop-grid", true))" class="primary-btn transition-3d-hover">COMPRE AQUÍ</a>
                </div>
            </div>
        }
        else
        {
            <div class="checkout__form">
                <h4>Detalles del Pago</h4>
                <EditForm Model="@Check_out" OnValidSubmit="@OnSubmit">
                    <div class="row">
                        <DataAnnotationsValidator />
                        <div class="col-lg-7 col-md-6">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="checkout__input">
                                        <label>Nombre<span>*</span></label>
                                        <InputText @bind-Value="Check_out.Full_name" />
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="checkout__input">
                                        <label>Provincia<span>*</span></label><br />
                                        <select class="custom-select-primary" value="@Province" @onchange="OnProvinceChange" required>
                                            @foreach (var item in Provinces)
                                            {
                                                <option value="@item.Id">
                                                    @item.Name
                                                </option>
                                            }
                                            <span class="arrow_carrot-down"></span>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="checkout__input">
                                        <label>Municipio<span>*</span></label>
                                        <InputText @bind-Value="Check_out.Address.State" />
                                    </div>
                                </div>
                            </div>
                            <div class="checkout__input">
                                <label>Pueblo/Ciudad<span>*</span></label>
                                <InputText @bind-Value="Check_out.Address.City" />
                            </div>
                            <div class="checkout__input">
                                <label>Dirección<span>*</span></label>
                                <InputText @bind-Value="Check_out.Address.Address_line" />
                            </div>
                            <div class="checkout__input">
                                <label>Código Postal<span>*</span></label>
                                <InputText @bind-Value="Check_out.Address.Postal_code" />
                            </div>
                        </div>
                        <div class="col-lg-5 col-md-6">
                            <div class="checkout__order">
                                <h4>Tu orden</h4>
                                <div class="checkout__order__products">Productos <span>Total</span></div>
                                <ul>
                                    @foreach (var item in Cart_items)
                                    {
                                        <li>@(GetProductNameShort(item.Product_name)) <span>$@(item.Price * item.Qty)</span></li>
                                    }
                                </ul>
                                <div class="checkout__order__subtotal">Subtotal <span>$@SubTotal_amount</span></div>
                                <div class="checkout__order__shipping">Envío <span>$@Check_out.Shipping_price</span></div>
                                <div class="checkout__order__total">Total <span>$@Cart.Total_amount</span></div>
                                <div class="checkout__input__checkbox">
                                    <label for="shipping">
                                        Recoger en la Tienda
                                        <input type="checkbox" id="shipping" @onchange="eventArgs => { OnPickUpChange(eventArgs.Value); }">
                                        <span class="checkmark"></span>
                                    </label>
                                </div>
                                <div class="checkout__input__checkbox">
                                    <label for="payment_type_presencial">
                                        Presencial
                                        <input type="radio" id="payment_type_presencial" name="payment_type" @onchange="@(() => OnPaymentChange("presencial"))">
                                        <span class="checkmark-radio"></span>
                                    </label>
                                </div>
                                <div class="checkout__input__checkbox">
                                    <label for="payment_type_ahora">
                                        Pagar ahora
                                        <input type="radio" id="payment_type_ahora" name="payment_type" @onchange="@(() => OnPaymentChange("ahora"))">
                                        <span class="checkmark-radio"></span>
                                    </label>
                                </div>
                                @if (payment_type == "presencial")
                                {
                                    <p>
                                        El pago se realizará de forma presencial, en efectivo o mediante transferencia bancaria
                                        a la cuenta que aparece en la factura una vez haya examinado los productos recibidos.
                                    </p>
                                }
                                else if (payment_type == "ahora")
                                {
                                    <p>
                                        Una vez completada la orden podrá realizar el pago.
                                    </p>
                                }
                                <button type="submit" class="site-btn">CREAR ORDEN</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        }
    </div>
</section>
<!-- Checkout Section End -->


@code{

    public List<CartItem> Cart_items { get; set; } = new List<CartItem>();
    public Cart Cart { get; set; } = new Cart();
    public UserDto User { get; set; } = new UserDto();
    public Address Address { get; set; } = new Address();
    public List<Address_Province> Provinces { get; set; } = new List<Address_Province>();
    public Check_Out Check_out { get; set; } = new Check_Out();
    public List<Request_Item> Request_items { get; set; } = new List<Request_Item>();
    public decimal SubTotal_amount { get; set; }
    public decimal Province_ship_price { get; set; }
    public bool Need_shipping { get; set; } = true;

    public string payment_type { get; set; }
    private void OnPaymentChange(string type)
    {
        payment_type = type;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        User = await userService.GetUserInfo();
        Cart = await cartService.Get();
        if (Cart != null)
        {
            Cart_items = (await cartService.Get()).Items;
            SubTotal_amount = await cartService.GetTotalAmount();
            Province_ship_price = await provinceService.GetShipPrice(User.Address.Province.Name);
            Check_out.Shipping_price = Province_ship_price;
            Cart.Total_amount = SubTotal_amount + Check_out.Shipping_price;
            Provinces = await provinceService.GetAllActive();
            Province = User.Address.Province_id.ToString();
            FillRequestData();
        }
    }

    private void FillRequestData()
    {
        Check_out.Full_name = User.Name + " " + User.LastName;
        Check_out.Address = User.Address;
    }

    private string GetProductNameShort(string name)
    {
        return name.Length > 30 ? name.Substring(0, 30) + "..." : name;
    }

    private void OnPickUpChange(object value)
    {
        if ((bool)value)
            Need_shipping = false;
        else
            Need_shipping = true;
        Check_out.Shipping_price = Need_shipping ? Province_ship_price : 0;
        Cart.Total_amount = SubTotal_amount + Check_out.Shipping_price;
    }

    private string Province
    {
        get
        {
            return Check_out.Address.Province_id.ToString();
        }
        set
        {
            Check_out.Address.Province_id = int.Parse(value);
        }
    }

    private async Task OnProvinceChange(ChangeEventArgs e)
    {
        Province_ship_price = await provinceService.GetShipPrice(int.Parse(e.Value.ToString()));
        Check_out.Shipping_price = Need_shipping ? Province_ship_price : 0;
        Cart.Total_amount = SubTotal_amount + Check_out.Shipping_price;
        Check_out.Address.Province_id = int.Parse(e.Value.ToString());
    }

    private async Task OnSubmit()
    {
        var payment = payment_type == null ? false : true;
        if (!payment)
        {
            toastService.ShowError("Debe marcar el tipo de pago", "Error");
            return;
        }
        var goodToGo = await requestService.VerifyItemQty(Cart.Items);
        if (!goodToGo)
            return;
        await requestService.Add(Check_out, Cart, Need_shipping);
        await cartService.WipeCart();
        await LoadData();
        if (payment_type.Equals("ahora"))
            navi.NavigateTo("/tracker", true);
    }

}