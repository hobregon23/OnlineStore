@page "/admin/user"
@layout BlazorLayout
@attribute [Authorize(Roles = "Admin")]
@inject IUserService userService
@inject NavigationManager navi
@inject IToastService toastService
@inject IAddressProvinceService provinceService


<div class="container space-1 mb-5">
    <div class="d-sm-flex align-items-center justify-content-between mb-3">
        <h4 class="text-secondary font-weight-normal mb-0">Id: @userInfo.Id <span style="font-size: small; font-weight: bold" class="@(userInfo.IsActive ? "text-success" : "text-danger")"> @(userInfo.IsActive ? "Activo" : "Inactivo")</span></h4>
    </div><hr />
    <div class="col-md-12">
        <div class="row">
            <EditForm class="col-lg-11 col-md-11 mx-md-auto" Model="userInfo" OnValidSubmit="UpdateUser">
                <!-- Errors here -->
                <DataAnnotationsValidator />
                <!-- End Errors -->
                <!-- Form Group -->
                <div class="row">
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Rol<span>*</span></label>
                            <InputSelect Class="form-control" @bind-Value="@userRol" disabled>
                                <option value="Delivery">Repartidor</option>
                                <option value="User">Usuario</option>
                                <option value="Admin">Administrador</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Usuario<span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.UserName" disabled />
                            <ValidationMessage For="@(() => userInfo.UserName)" />
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Correo<span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.Email" />
                            <ValidationMessage For="@(() => userInfo.Email)" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Nombre<span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.Name" />
                            <ValidationMessage For="@(() => userInfo.Name)" />
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Apellidos<span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.LastName" />
                            <ValidationMessage For="@(() => userInfo.LastName)" />
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Teléfono<span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.PhoneNumber" />
                            <ValidationMessage For="@(() => userInfo.PhoneNumber)" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Dirección<span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.Address.Address_line" />
                            <ValidationMessage For="@(() => userInfo.Address.Address_line)" />
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Ciudad<span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.Address.City" />
                            <ValidationMessage For="@(() => userInfo.Address.City)" />
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Municipio <span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.Address.State" />
                            <ValidationMessage For="@(() => userInfo.Address.State)" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Código Postal<span>*</span></label>
                            <InputText Class="form-control" @bind-Value="@userInfo.Address.Postal_code" />
                            <ValidationMessage For="@(() => userInfo.Address.Postal_code)" />
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkout__input">
                            <label>Provincia<span>*</span></label><br />
                            <InputSelect Class="form-control" @bind-Value="@ProvinceId" required>
                                @foreach (var item in Provinces)
                                {
                                    <option value="@item.Id">
                                        @item.Name
                                    </option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <!-- Button -->
                <hr />
                <div class="row align-items-center mb-3 mt-3">
                    <div class="col-lg-12 col-sm-6 text-right">
                        <button type="submit" class="primary-btn transition-3d-hover">Actualizar</button>
                    </div>
                </div>
                <!-- End Button -->
            </EditForm>
        </div>
    </div>
</div>


@code {

    public string Id { get; set; }
    public User userInfo { get; set; } = new User() { Address = new Address() { Province = new Address_Province() } };
    private List<Address_Province> Provinces = new List<Address_Province>();
    private string userRol { get; set; } = "Delivery";
    private string ProvinceId
    {
        get
        {
            return userInfo.Address.Province_id.ToString();
        }
        set
        {
            userInfo.Address.Province_id = int.Parse(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadParameters();
    }

    private async Task LoadParameters()
    {
        var uri = navi.ToAbsoluteUri(navi.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _param))
        {
            Id = _param;
        }
        await LoadData();
    }

    private async Task LoadData()
    {
        userInfo = await userService.GetByIdIncluding(Id);
        Provinces = await provinceService.GetAll();
        userRol = await userService.GetUserRol(userInfo.Id);
    }

    private async Task UpdateUser()
    {
        if (!AddressFullfill())
        {
            toastService.ShowWarning("Complete su dirección", "Advertencia");
            return;
        }
        await userService.Update(userInfo);
    }

    private bool AddressFullfill()
    {
        if (string.IsNullOrWhiteSpace(userInfo.Address.Address_line) || string.IsNullOrEmpty(userInfo.Address.Address_line) ||
            string.IsNullOrWhiteSpace(userInfo.Address.City) || string.IsNullOrEmpty(userInfo.Address.City) ||
            string.IsNullOrWhiteSpace(userInfo.Address.State) || string.IsNullOrEmpty(userInfo.Address.State) ||
            string.IsNullOrWhiteSpace(userInfo.Address.Postal_code) || string.IsNullOrEmpty(userInfo.Address.Postal_code))
            return false;
        return true;
    }
}
