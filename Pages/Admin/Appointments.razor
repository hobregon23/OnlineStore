@page "/admin/appointments"
@layout BlazorLayout
@attribute [Authorize(Roles = "Admin, Worker")]
@inject IJSRuntime JS
@inject IToastService toastService
@inject IAppointmentService appointmentService
@inject NavigationManager navi


<div class="container space-1 mb-5">
    <div class="d-sm-flex align-items-center justify-content-between mb-3">
        <h3 class="text-secondary font-weight-normal mb-0">Servicios</h3>
        <div class="mr-3 ml-3 row">
            <SearchSimple search_obj="@search_obj" OnValidSubmit="@Search" />
        </div>
    </div>
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-12 w-md-75 w-lg-40 mx-md-auto">
                <div class="table-responsive-sm">

                    @if (appointments.Count.Equals(0))
                    {
                        <p class="text-danger" style="text-align: center">N/A</p>
                    }
                    else
                    {
                        <table class="table table-light">
                            <thead>
                                <tr style="font-size: small; color: white; background-image: linear-gradient(182deg, rgb(8, 38, 123) 0%, #4f1056 90%);">
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Created_at"))">Creado </span><i class="@(IndicadorOrden("Created_at"))"></i></th>
                                    <th>Tipo</th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Date"))">Fecha </span><i class="@(IndicadorOrden("Date"))"></i></th>
                                    <th>Nombre</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody class="font-size-1" style="font-family: 'Arial Rounded MT'">
                                @foreach (var item in appointments)
                                {
                                    <tr class="my-transition-3d-hover">
                                        <td class="align-middle"><a class=" text-info" style="font-size: small">@String.Format("{0:dd/MM/yyyy}", item.Created_at)</a></td>
                                        <td class="align-middle"><a style="font-size: small">@item.Type</a></td>
                                        <td class="align-middle"><a class=" text-info" style="font-size: small">@String.Format("{0:dd/MM/yyyy}", item.Date)</a></td>
                                        <td class="align-middle"><a style="font-size: small">@item.Fullname</a></td>
                                        <td class="align-middle">
                                            <mark @onclick="@(() => Eliminar(item))" class="bg-danger" style="cursor:pointer; border-radius:20px 20px 20px 20px; padding-left:5px; color:white"><span class="fa fa-trash" style="font-size: 20px" aria-hidden="true"></span></mark>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
                <PaginationComponent TotaPagesQuantity="PagParam.TotalPageQuantity" CurrentPage="PagParam.CurrentPage" Radius="3" SelectedPage="SelectedPage"></PaginationComponent>
                <div class="col-lg-12 col-md-4 mt-2">
                    <div class="filter__found" style="text-align: right">
                        <h6><span>@appointments.Count de @PagParam.itemsTotal</span> encontrados</h6>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>



@code {

    public List<Appointment> appointments { get; set; } = new List<Appointment>();
    private SearchFilter search_obj { get; set; } = new SearchFilter();
    private PaginationParameters PagParam { get; set; } = new PaginationParameters() { QuantityPerPage = 7, FieldActualSort = "Date", OrderActualSort = "Asc" };

    protected async override Task OnInitializedAsync()
    {
        await LoadItems();
    }

    async Task LoadItems(int page = 1)
    {
        var data = await appointmentService.GetPag(new Pagination() { Page = page, QuantityPerPage = PagParam.QuantityPerPage }, search_obj, PagParam.FieldActualSort, PagParam.OrderActualSort);
        PagParam.TotalPageQuantity = data.CantPorPag;
        appointments = data.ListaObjetos.ToList();
        PagParam.itemsTotal = data.ItemsTotal;
        PagParam.CurrentPage = page;
    }

    private async Task SelectedPage(int page)
    {
        PagParam.CurrentPage = page;
        await LoadItems(page);
    }

    private string IndicadorOrden(string campoSorteo)
    {
        if (campoSorteo.Equals(PagParam.FieldActualSort))
        {
            return PagParam.OrderActualSort.Equals("Asc") ? "oi oi-arrow-top" : "oi oi-arrow-bottom";
        }
        return string.Empty;
    }

    private async Task Ordenar(string campoSorteo)
    {
        if (campoSorteo.Equals(PagParam.FieldActualSort))
        {
            PagParam.OrderActualSort = PagParam.OrderActualSort.Equals("Asc") ? "Desc" : "Asc";
        }
        else
        {
            PagParam.FieldActualSort = campoSorteo;
            PagParam.OrderActualSort = "Asc";
        }
        await LoadItems();
    }

    private async Task Search()
    {
        await LoadItems();
    }

    private async Task Eliminar(Appointment item)
    {
        if (item.IsActive)
        {
            if (await JS.ConfirmSinResp($"Eliminar", $"¿Desea eliminar la cita?"))
            {
                await appointmentService.Eliminar(item.Id);
                await LoadItems();
            }
        }
    }

}