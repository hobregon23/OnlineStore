@page "/admin/users"
@layout BlazorLayout
@attribute [Authorize(Roles = "Admin")]
@inject IUserService userService
@inject NavigationManager navi
@inject IJSRuntime JS


<div class="container space-1 mb-5">
    <div class="d-sm-flex align-items-center justify-content-between mb-3">
        <h3 class="text-secondary font-weight-normal mb-0">Usuarios</h3>
        <div class="mr-3 ml-3 row">
            <div class="mr-5">
                <button @onclick="@AddUser" type="button" class="btn admin-btn-sm btn-success transition-3d-hover"><span class="oi oi-plus" aria-hidden="true"></span></button>
            </div>
            <SearchSimple search_obj="@search_obj" OnValidSubmit="@Search" />
        </div>
    </div>
    <div class="col-md-12">
        <div class="row">

            <div class="col-md-12 w-md-75 w-lg-40 mx-md-auto">
                <div class="table-responsive-sm">

                    @if (UsersList.Count.Equals(0))
                    {
                        <p class="text-danger" style="text-align: center">N/A</p>
                    }
                    else
                    {
                        <table class="table table-light">
                            <thead>
                                <tr style="font-size: small; color: white; background-image: linear-gradient(182deg, rgb(8, 38, 123) 0%, #4f1056 90%);">
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Created_at"))">Creado </span><i class="@(IndicadorOrden("Created_at"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("UserName"))">Usuario </span><i class="@(IndicadorOrden("UserName"))"></i></th>
                                    <th>Nombre completo</th>
                                    <th>Rol</th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("IsActive"))">Estado </span><i class="@(IndicadorOrden("IsActive"))"></i></th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody class="font-size-1" style="font-family: 'Arial Rounded MT'">
                                @foreach (var item in UsersList)
                                {
                                    <tr class="my-transition-3d-hover">
                                        <td class="align-middle"><a class="text-info" style="font-size: small">@String.Format("{0:dd/MM/yyyy}", item.Created_at)</a></td>
                                        <td class="align-middle"><a style="font-size: small">@item.UserName</a></td>
                                        <td class="align-middle"><a style="font-size: small">@item.Name @item.LastName</a></td>
                                        <td class="align-middle"><a style="font-size: small">@(UserRol[item.Id])</a></td>
                                        <td class="align-middle"><span style="font-size: small" class="@(item.IsActive ? "text-success" : "text-danger")"> @(item.IsActive ? "Activo" : "Inactivo")</span></td>
                                        <td>
                                            <mark @onclick="@(() => navi.NavigateTo("/admin/user?id="+item.Id, true))" class="bg-primary" style="cursor:pointer; border-radius:20px 20px 20px 20px; padding-left:5px; color:white"><span class="oi oi-pencil" aria-hidden="true"></span></mark>
                                            <mark @onclick="@(() => Activar_Desactivar(item))" class="@(item.IsActive ? "bg-danger" : "bg-success")" style="cursor:pointer; border-radius:20px 20px 20px 20px; padding-left:5px; color:white"><span class="oi @(item.IsActive ? "oi-x" : "oi-check")" aria-hidden="true"></span></mark>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
                <PaginationComponent TotaPagesQuantity="PagParam.TotalPageQuantity" CurrentPage="PagParam.CurrentPage" Radius="3" SelectedPage="SelectedPage"></PaginationComponent>
            </div>
        </div>

    </div>
</div>
<AddUser userInfo="userInfo" DataChanged="@DataChanged" />



@code {

    private UserDto userInfo { get; set; } = new UserDto();
    private SearchFilter search_obj { get; set; } = new SearchFilter();
    private List<User> UsersList { get; set; } = new List<User>();
    private Dictionary<string, string> UserRol { get; set; } = new Dictionary<string, string>();
    private PaginationParameters PagParam { get; set; } = new PaginationParameters() { QuantityPerPage = 7, FieldActualSort = "Created_at" };

    protected async override Task OnInitializedAsync()
    {
        await LoadItems();
    }

    async Task LoadItems(int page = 1)
    {
        var data = await userService.GetPag(new Pagination() { Page = page, QuantityPerPage = PagParam.QuantityPerPage }, search_obj.Search_text, PagParam.FieldActualSort, PagParam.OrderActualSort);
        PagParam.TotalPageQuantity = data.CantPorPag;
        UsersList = data.ListaObjetos.ToList();
        await GetUserRol();
    }

    private async Task SelectedPage(int page)
    {
        PagParam.CurrentPage = page;
        await LoadItems(page);
    }

    private string IndicadorOrden(string campoSorteo)
    {
        if (campoSorteo.Equals(PagParam.FieldActualSort))
        {
            return PagParam.OrderActualSort.Equals("Asc") ? "oi oi-arrow-top" : "oi oi-arrow-bottom";
        }
        return string.Empty;
    }

    private async Task Ordenar(string campoSorteo)
    {
        if (campoSorteo.Equals(PagParam.FieldActualSort))
        {
            PagParam.OrderActualSort = PagParam.OrderActualSort.Equals("Asc") ? "Desc" : "Asc";
        }
        else
        {
            PagParam.FieldActualSort = campoSorteo;
            PagParam.OrderActualSort = "Asc";
        }
        await LoadItems();
    }

    private async Task Search()
    {
        await LoadItems();
    }

    private async Task GetUserRol()
    {
        UserRol = new Dictionary<string, string>();
        foreach (var item in UsersList)
        {
            var rol = await userService.GetUserRol(item.Id);
            UserRol.Add(item.Id, rol);
        }
    }

    private async Task AddUser()
    {
        await JS.InvokeAsync<object>("ShowModal", "taskModal");
    }

    private async Task Activar_Desactivar(User user)
    {
        if (user.IsActive)
        {
            if (await JS.ConfirmSinResp($"Desactivar", $"Esto desactivará al usuario."))
            {
                var resp = await userService.Eliminar(user.Id);
                await LoadItems(PagParam.CurrentPage);
            }
        }
        else
        {
            if (await JS.ConfirmSinResp($"Activar", $"Esto activará al usuario."))
            {
                var resp = await userService.Activar(user.Id);
                await LoadItems(PagParam.CurrentPage);
            }
        }
    }

    private async void DataChanged()
    {
        await LoadItems();
        userInfo = new UserDto();
        StateHasChanged();
    }

}