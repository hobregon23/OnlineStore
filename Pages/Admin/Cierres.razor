@page "/admin/cierres"
@layout BlazorLayout
@attribute [Authorize(Roles = "Admin, Worker")]
@inject ICierreService cierreService
@inject IJSRuntime JS
@inject NavigationManager navi


<div class="container space-1 mb-5">
    <div class="d-sm-flex align-items-center justify-content-between mb-3">
        <h3 class="text-secondary font-weight-normal mb-0">Cierres de Caja</h3>
    </div>
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-12 w-md-75 w-lg-40 mx-md-auto">
                <div class="table-responsive-sm">

                    @if (Item_list.Count.Equals(0))
                    {
                        <p class="text-danger" style="text-align: center">N/A</p>
                    }
                    else
                    {
                        <table class="table table-light">
                            <thead>
                                <tr style="font-size: small; color: white; background-image: linear-gradient(182deg, rgb(8, 38, 123) 0%, #4f1056 90%);">
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Created_at"))">Fecha </span><i class="@(IndicadorOrden("Created_at"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("F_inicio"))">Desde </span><i class="@(IndicadorOrden("F_inicio"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("F_fin"))">Hasta </span><i class="@(IndicadorOrden("F_fin"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Qty_ventas"))">Ventas </span><i class="@(IndicadorOrden("Qty_ventas"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Qty_reparaciones"))">Reparaciones </span><i class="@(IndicadorOrden("Qty_reparaciones"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Ingreso"))">Ingreso </span><i class="@(IndicadorOrden("Ingreso"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Costo"))">Costo </span><i class="@(IndicadorOrden("Costo"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Ganancia"))">Ganancia </span><i class="@(IndicadorOrden("Ganancia"))"></i></th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody class="font-size-1" style="font-family: 'Arial Rounded MT'">
                                @foreach (var item in Item_list)
                                {
                                    <tr class="my-transition-3d-hover">
                                        <td class="align-middle"><a style="font-size: small">@String.Format("{0:dd/MM/yyyy}", item.Created_at)</a></td>
                                        <td class="align-middle"><a style="font-size: small">@String.Format("{0:dd/MM/yyyy}", item.F_inicio)</a></td>
                                        <td class="align-middle"><a style="font-size: small">@String.Format("{0:dd/MM/yyyy}", item.F_fin)</a></td>
                                        <td class="align-middle"><a class="text-danger" style="font-size: small">@item.Qty_ventas</a></td>
                                        <td class="align-middle"><a class="text-info" style="font-size: small">@item.Qty_reparaciones</a></td>
                                        <td class="align-middle"><a class="text-success" style="font-size: small">@item.Ingreso</a></td>
                                        <td class="align-middle"><a class="text-warning" style="font-size: small">@item.Costo</a></td>
                                        <td class="align-middle"><a class="text-success" style="font-size: small">@item.Ganancia</a></td>
                                        <td class="align-middle">
                                            <mark @onclick="@(() => navi.NavigateTo("/admin/cierre_printable?id="+item.Id, true))" class="bg-primary" style="cursor:pointer; border-radius:50px; padding-left:5px; color:white"><span class="fa fa-eye" aria-hidden="true"></span></mark>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
                <PaginationComponent TotaPagesQuantity="PagParam.TotalPageQuantity" CurrentPage="PagParam.CurrentPage" Radius="3" SelectedPage="SelectedPage"></PaginationComponent>
                <div class="col-lg-12 col-md-4 mt-2">
                    <div class="filter__found" style="text-align: right">
                        <h6><span>@Item_list.Count de @PagParam.itemsTotal</span> encontrados</h6>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>



@code {

    private List<Cierre> Item_list { get; set; } = new List<Cierre>();
    private PaginationParameters PagParam { get; set; } = new PaginationParameters() { QuantityPerPage = 7, FieldActualSort = "Created_at" };

    protected async override Task OnInitializedAsync()
    {
        await LoadItems();
    }

    async Task LoadItems(int page = 1)
    {
        var data = await cierreService.GetPag(new Pagination() { Page = page, QuantityPerPage = PagParam.QuantityPerPage }, new SearchFilter(), PagParam.FieldActualSort, PagParam.OrderActualSort);
        PagParam.TotalPageQuantity = data.CantPorPag;
        Item_list = data.ListaObjetos.ToList();
        PagParam.itemsTotal = data.ItemsTotal;
        PagParam.CurrentPage = page;
    }

    private async Task SelectedPage(int page)
    {
        PagParam.CurrentPage = page;
        await LoadItems(page);
    }

    private string IndicadorOrden(string campoSorteo)
    {
        if (campoSorteo.Equals(PagParam.FieldActualSort))
        {
            return PagParam.OrderActualSort.Equals("Asc") ? "oi oi-arrow-top" : "oi oi-arrow-bottom";
        }
        return string.Empty;
    }

    private async Task Ordenar(string campoSorteo)
    {
        if (campoSorteo.Equals(PagParam.FieldActualSort))
        {
            PagParam.OrderActualSort = PagParam.OrderActualSort.Equals("Asc") ? "Desc" : "Asc";
        }
        else
        {
            PagParam.FieldActualSort = campoSorteo;
            PagParam.OrderActualSort = "Asc";
        }
        await LoadItems();
    }

    private async void DataChanged()
    {
        await LoadItems();
        StateHasChanged();
    }

}