@page "/admin/services"
@layout BlazorLayout
@attribute [Authorize(Roles = "Admin, Worker")]
@inject IServiceService serviceService
@inject ICategoryService categoryService
@inject IBrandService brandService
@inject IModelService modelService
@inject ICierreService cierreService
@inject IJSRuntime JS
@inject IToastService toastService
@inject NavigationManager navi


<div class="container space-1 mb-5">
    <div class="d-sm-flex align-items-center justify-content-between mb-3">
        <h3 class="text-secondary font-weight-normal mb-0">Servicios</h3>
        <div class="mr-3 ml-3 row">
            <div class="mr-5">
                <button @onclick="@CerrarCaja" type="button" class="btn admin-btn-sm btn-outline-info transition-3d-hover">Cerrar Caja</button>
            </div>
            <div class="mr-5">
                <button @onclick="@Add" type="button" class="btn admin-btn-sm btn-success transition-3d-hover"><span class="oi oi-plus" aria-hidden="true"></span></button>
            </div>
            <SearchSimple search_obj="@search_obj" OnValidSubmit="@Search" />
        </div>
    </div>
    <div class="col-md-12">
        <div class="row">
            <div class="col-md-12 w-md-75 w-lg-40 mx-md-auto">
                <div class="table-responsive-sm">

                    @if (Item_list.Count.Equals(0))
                    {
                        <p class="text-danger" style="text-align: center">N/A</p>
                    }
                    else
                    {
                        <table class="table table-light">
                            <thead>
                                <tr style="font-size: small; color: white; background-image: linear-gradient(182deg, rgb(8, 38, 123) 0%, #4f1056 90%);">
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Created_at"))">Fecha </span><i class="@(IndicadorOrden("Created_at"))"></i></th>
                                    <th>Tipo</th>
                                    <th>Descripción</th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Cantidad"))">Cantidad </span><i class="@(IndicadorOrden("Cantidad"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Precio"))">Precio </span><i class="@(IndicadorOrden("Precio"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Costo"))">Costo </span><i class="@(IndicadorOrden("Costo"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("Ingreso"))">Ingreso </span><i class="@(IndicadorOrden("Ingreso"))"></i></th>
                                    <th><span style="cursor:pointer" @onclick="@(() => Ordenar("GananciaNeta"))">Ganancia </span><i class="@(IndicadorOrden("GananciaNeta"))"></i></th>
                                    <th>Estado</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody class="font-size-1" style="font-family: 'Arial Rounded MT'">
                                @foreach (var item in Item_list)
                                {
                                    <tr class="my-transition-3d-hover">
                                        <td class="align-middle"><a class=" text-info" style="font-size: small">@String.Format("{0:dd/MM/yyyy}", item.Created_at)</a></td>
                                        <td class="align-middle"><a style="color: #424444; font-size: small">@item.Tipo</a></td>
                                        <td class="align-middle"><a style="color: #424444; font-size: small">@item.Descripcion</a></td>
                                        <td class="align-middle"><a class="text-danger" style="font-size: small">@item.Cantidad</a></td>
                                        <td class="align-middle"><a class="text-info" style="font-size: small">@item.Precio</a></td>
                                        <td class="align-middle"><a class="text-success" style="font-size: small">@item.Costo</a></td>
                                        <td class="align-middle"><a class="text-warning" style="font-size: small">@item.Ingreso</a></td>
                                        <td class="align-middle"><a class="text-success" style="font-size: small">@item.GananciaNeta</a></td>
                                        <td class="align-middle"><span style="font-size: small" class="@(item.IsActive ? "text-success" : "text-danger")"> @(item.IsActive ? "Activo" : "Inactivo")</span></td>
                                        <td class="align-middle">
                                            @if (item.IsActive)
                                            {
                                                <mark @onclick="@(() => Edit(item))" class="bg-primary" style="cursor:pointer; border-radius:50px 50px 50px 20px; padding-left:5px; color:white"><span class="fa fa-pencil" aria-hidden="true"></span></mark>
                                                <mark @onclick="@(() => Eliminar(item))" class="bg-danger" style="cursor:pointer; border-radius:20px 20px 20px 20px; padding-left:5px; color:white"><span class="fa fa-trash" style="font-size: 20px" aria-hidden="true"></span></mark>
                                            }
                                            else
                                            {
                                                <mark @onclick="@(() => Edit(item))" class="bg-primary" style="cursor:pointer; border-radius:50px; padding-left:5px; color:white"><span class="fa fa-eye" aria-hidden="true"></span></mark>
                                                <mark class="bg-success" style="border-radius:20px 20px 20px 20px; padding-left:5px; color:white"><span class="fa fa-check" aria-hidden="true"></span></mark>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
                <PaginationComponent TotaPagesQuantity="PagParam.TotalPageQuantity" CurrentPage="PagParam.CurrentPage" Radius="3" SelectedPage="SelectedPage"></PaginationComponent>
                <div class="col-lg-12 col-md-4 mt-2">
                    <div class="filter__found" style="text-align: right">
                        <h6><span>@Item_list.Count de @PagParam.itemsTotal</span> encontrados</h6>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
<AddService Item="Item" Brand_list="Brands" Category_list="Categories" Model_list="Models" DataChanged="DataChanged"></AddService>
<EditService Item="Item" Brand_list="Brands" Category_list="Categories" Model_list="Models" DataChanged="DataChanged"></EditService>


@code {

    private Service Item { get; set; } = new Service();
    private List<Service> Item_list { get; set; } = new List<Service>();
    private SearchFilter search_obj { get; set; } = new SearchFilter();
    private PaginationParameters PagParam { get; set; } = new PaginationParameters() { QuantityPerPage = 7, FieldActualSort = "Created_at" };

    public List<Category> Categories { get; set; } = new List<Category>();
    public List<Brand> Brands { get; set; } = new List<Brand>();
    public List<Model> Models { get; set; } = new List<Model>();

    protected async override Task OnInitializedAsync()
    {
        await LoadItems();
    }

    async Task LoadItems(int page = 1)
    {
        var data = await serviceService.GetPag(new Pagination() { Page = page, QuantityPerPage = PagParam.QuantityPerPage }, search_obj, PagParam.FieldActualSort, PagParam.OrderActualSort);
        PagParam.TotalPageQuantity = data.CantPorPag;
        Item_list = data.ListaObjetos.ToList();
        PagParam.itemsTotal = data.ItemsTotal;
        PagParam.CurrentPage = page;
        Categories = await categoryService.GetAll();
        Brands = await brandService.GetAll();
        Models = await modelService.GetAll();
    }

    private async Task SelectedPage(int page)
    {
        PagParam.CurrentPage = page;
        await LoadItems(page);
    }

    private string IndicadorOrden(string campoSorteo)
    {
        if (campoSorteo.Equals(PagParam.FieldActualSort))
        {
            return PagParam.OrderActualSort.Equals("Asc") ? "oi oi-arrow-top" : "oi oi-arrow-bottom";
        }
        return string.Empty;
    }

    private async Task Ordenar(string campoSorteo)
    {
        if (campoSorteo.Equals(PagParam.FieldActualSort))
        {
            PagParam.OrderActualSort = PagParam.OrderActualSort.Equals("Asc") ? "Desc" : "Asc";
        }
        else
        {
            PagParam.FieldActualSort = campoSorteo;
            PagParam.OrderActualSort = "Asc";
        }
        await LoadItems();
    }

    private async Task Search()
    {
        await LoadItems();
    }

    private async Task Edit(Service item)
    {
        Item = new Service() { Cantidad = item.Cantidad, Costo = item.Costo, Created_at = item.Created_at, Descripcion = item.Descripcion, GananciaNeta = item.GananciaNeta, Id = item.Id, Ingreso = item.Ingreso, IsActive = item.IsActive, Precio = item.Precio, Tipo = item.Tipo, Used_products = new List<Used_Product>() };
        foreach (var it in item.Used_products)
        {
            Item.Used_products.Add(it);
        }
        await JS.InvokeAsync<object>("ShowModal", "taskModal-edit");
    }

    private async Task Add()
    {
        Item = new Service();
        await JS.InvokeAsync<object>("ShowModal", "taskModal");
    }

    private async Task Eliminar(Service item)
    {
        if (item.IsActive)
        {
            if (await JS.ConfirmSinResp($"Eliminar", $"¿Desea eliminar el servicio?"))
            {
                await serviceService.Eliminar(item.Id);
                await LoadItems();
            }
        }
    }

    private async Task CerrarCaja()
    {
        if (await JS.ConfirmSinResp($"Advertencia", $"¿Desea realizar un cierre de caja?"))
        {
            var id = await cierreService.Create();
            if (id == -1)
                toastService.ShowInfo("No hay servicios abiertos", "Info");
            else if (id == 0)
                toastService.ShowError("Ha ocurrido un error inesperado", "Error");
            else
            {
                if (await JS.ConfirmSinResp($"Info", $"¿Desea ver el cierre creado?"))
                {
                    navi.NavigateTo("admin/cierre_printable?id=" + id, true);
                }
                await LoadItems();
            }
        }
    }

    private async void DataChanged()
    {
        await LoadItems();
        StateHasChanged();
    }

}