<div class="header__top">
    <div class="container">
        <div class="row">
            <div class="col-lg-6 col-md-6">
                <div class="header__top__left">
                    <ul>
                        <li><i class="fa fa-envelope"></i> onlinestore@gmail.com</li>
                        <li>Todo en un solo lugar</li>
                    </ul>
                </div>
            </div>
            <div class="col-lg-6 col-md-6">
                <div class="header__top__right">
                    <div class="header__top__right__social">
                        <a class="login-name" href="/new-appointment" target="_self">Reservar cita de reparación</a>
                        <a href="https://facebook.com/onlinestore" target="_blank"><i class="fa fa-facebook"></i></a>
                    </div>
                    <div class="header__top__right__auth" style="display: ruby;">
                        <AuthorizeView>
                            <Authorized>
                                <div>
                                    <a href="/user_ed" class="login-name">Hola, <strong>@Name!</strong> </a>
                                </div>
                                <div class="ml-3">
                                    <a href="/salir" style="color: red; font-weight:bold">Salir <i class="fa fa-sign-out"></i></a>
                                </div>
                            </Authorized>
                            <NotAuthorized>
                                <a href="login"><i class="fa fa-user"></i> Login</a>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    private string Name { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        var claims = user.Claims;
        try
        {
            Name = claims.First(x => x.Type.Contains("givenname")).Value;
        }
        catch
        {
            Name = "";
        }
    }

}